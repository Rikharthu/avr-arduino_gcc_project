
Arduino GCC Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000025a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009c1  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076d  00000000  00000000  00000ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040a  00000000  00000000  00001452  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  0000185c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e9  00000000  00000000  00001910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a3  00000000  00000000  00001cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00001f9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ee       	ldi	r30, 0xE6	; 230
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
  9e:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
		loop();
	}
}

void setup(){
	currentDelay=MAX_DELAY;
  a6:	84 e6       	ldi	r24, 0x64	; 100
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
  ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	
	// Configure data direction register DDR
	// 1 - output, 0 - input
	DDRB=0b00011111; // 8-12: output
  b2:	8f e1       	ldi	r24, 0x1F	; 31
  b4:	84 b9       	out	0x04, r24	; 4
	
	// also set 13th port as output too
	DDRB=DDRB | 0b00100000;
  b6:	25 9a       	sbi	0x04, 5	; 4
  b8:	08 95       	ret

000000ba <delay_ms>:
		currentDelay=MAX_DELAY;
	}
}

void delay_ms(int ms){
	for(int i=0; i<ms;i++){
  ba:	18 16       	cp	r1, r24
  bc:	19 06       	cpc	r1, r25
  be:	6c f4       	brge	.+26     	; 0xda <delay_ms+0x20>
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	ef e9       	ldi	r30, 0x9F	; 159
  c6:	ff e0       	ldi	r31, 0x0F	; 15
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <delay_ms+0xe>
  cc:	00 c0       	rjmp	.+0      	; 0xce <delay_ms+0x14>
  ce:	00 00       	nop
  d0:	2f 5f       	subi	r18, 0xFF	; 255
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
  d4:	28 17       	cp	r18, r24
  d6:	39 07       	cpc	r19, r25
  d8:	a9 f7       	brne	.-22     	; 0xc4 <delay_ms+0xa>
  da:	08 95       	ret

000000dc <loop>:
	//}else{
		//PORTB=1<<1;
	//}
}

void loop(){
  dc:	ef 92       	push	r14
  de:	ff 92       	push	r15
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
	//delay_ms(currentDelay);
	// LED off
	//PORTB=0;
	//delay_ms(currentDelay);

	for(int i=0;i<5;i++){
  e8:	c0 e0       	ldi	r28, 0x00	; 0
  ea:	d0 e0       	ldi	r29, 0x00	; 0
#ifndef BITMATH_H_
#define BITMATH_H_

// set n'th bit to x
int setBitTo(int number, int n, int x){
	number^=(-x^number)&(1<<n);
  ec:	01 e0       	ldi	r16, 0x01	; 1
  ee:	10 e0       	ldi	r17, 0x00	; 0
		//PORTB=1<<i;
		PORTB=setBitTo(PORTB,i,1);
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	78 01       	movw	r14, r16
  f6:	0c 2e       	mov	r0, r28
  f8:	02 c0       	rjmp	.+4      	; 0xfe <loop+0x22>
  fa:	ee 0c       	add	r14, r14
  fc:	ff 1c       	adc	r15, r15
  fe:	0a 94       	dec	r0
 100:	e2 f7       	brpl	.-8      	; 0xfa <loop+0x1e>
 102:	9c 01       	movw	r18, r24
 104:	20 95       	com	r18
 106:	30 95       	com	r19
 108:	2e 21       	and	r18, r14
 10a:	3f 21       	and	r19, r15
 10c:	82 27       	eor	r24, r18
 10e:	93 27       	eor	r25, r19
 110:	85 b9       	out	0x05, r24	; 5
		if(i!=4)
 112:	c4 30       	cpi	r28, 0x04	; 4
 114:	d1 05       	cpc	r29, r1
 116:	09 f4       	brne	.+2      	; 0x11a <loop+0x3e>
 118:	50 c0       	rjmp	.+160    	; 0x1ba <loop+0xde>
			delay_ms(currentDelay);
 11a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 11e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 122:	0e 94 5d 00 	call	0xba	; 0xba <delay_ms>
		PORTB=clearBit(PORTB,i);
 126:	25 b1       	in	r18, 0x05	; 5
	return number;
}

// clear n'th bit (set it to 0)
int clearBit(int number, int n){
	number &=~(1<<n);
 128:	c7 01       	movw	r24, r14
 12a:	80 95       	com	r24
 12c:	90 95       	com	r25
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	82 23       	and	r24, r18
 132:	93 23       	and	r25, r19
 134:	85 b9       	out	0x05, r24	; 5
	//delay_ms(currentDelay);
	// LED off
	//PORTB=0;
	//delay_ms(currentDelay);

	for(int i=0;i<5;i++){
 136:	21 96       	adiw	r28, 0x01	; 1
 138:	c5 30       	cpi	r28, 0x05	; 5
 13a:	d1 05       	cpc	r29, r1
 13c:	c9 f6       	brne	.-78     	; 0xf0 <loop+0x14>
 13e:	c4 e0       	ldi	r28, 0x04	; 4
 140:	d0 e0       	ldi	r29, 0x00	; 0
		if(i!=4)
			delay_ms(currentDelay);
		PORTB=clearBit(PORTB,i);
	}
	for(int i=4;i>=0;i--){
		PORTB=1<<i;
 142:	01 e0       	ldi	r16, 0x01	; 1
 144:	10 e0       	ldi	r17, 0x00	; 0
 146:	c8 01       	movw	r24, r16
 148:	0c 2e       	mov	r0, r28
 14a:	02 c0       	rjmp	.+4      	; 0x150 <loop+0x74>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	0a 94       	dec	r0
 152:	e2 f7       	brpl	.-8      	; 0x14c <loop+0x70>
 154:	85 b9       	out	0x05, r24	; 5
		delay_ms(currentDelay);
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 15a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 15e:	0e 94 5d 00 	call	0xba	; 0xba <delay_ms>
		PORTB=setBitTo(PORTB,i,1);
		if(i!=4)
			delay_ms(currentDelay);
		PORTB=clearBit(PORTB,i);
	}
	for(int i=4;i>=0;i--){
 162:	21 97       	sbiw	r28, 0x01	; 1
 164:	80 f7       	brcc	.-32     	; 0x146 <loop+0x6a>
		PORTB=1<<i;
		delay_ms(currentDelay);
	}
	PORTB=0;
 166:	15 b8       	out	0x05, r1	; 5
	delay_ms(currentDelay);
 168:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 16c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 170:	0e 94 5d 00 	call	0xba	; 0xba <delay_ms>
	// blink all 5 LEDs (8, 9, 10, 11, 12)
	PORTB=0b00011111;
 174:	8f e1       	ldi	r24, 0x1F	; 31
 176:	85 b9       	out	0x05, r24	; 5
	delay_ms(currentDelay);
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 17c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 180:	0e 94 5d 00 	call	0xba	; 0xba <delay_ms>
	PORTB=0;
 184:	15 b8       	out	0x05, r1	; 5
	delay_ms(currentDelay);
 186:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 18a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 18e:	0e 94 5d 00 	call	0xba	; 0xba <delay_ms>

	if(currentDelay>MIN_DELAY){
 192:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 196:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 19a:	18 16       	cp	r1, r24
 19c:	19 06       	cpc	r1, r25
 19e:	34 f4       	brge	.+12     	; 0x1ac <loop+0xd0>
		currentDelay-=STEP_DELAY;
 1a0:	0a 97       	sbiw	r24, 0x0a	; 10
 1a2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 1a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 1aa:	0f c0       	rjmp	.+30     	; 0x1ca <loop+0xee>
	}else{
		currentDelay=MAX_DELAY;
 1ac:	84 e6       	ldi	r24, 0x64	; 100
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 1b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 1b8:	08 c0       	rjmp	.+16     	; 0x1ca <loop+0xee>
	for(int i=0;i<5;i++){
		//PORTB=1<<i;
		PORTB=setBitTo(PORTB,i,1);
		if(i!=4)
			delay_ms(currentDelay);
		PORTB=clearBit(PORTB,i);
 1ba:	85 b1       	in	r24, 0x05	; 5
 1bc:	e0 94       	com	r14
 1be:	f0 94       	com	r15
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	e8 22       	and	r14, r24
 1c4:	f9 22       	and	r15, r25
 1c6:	e5 b8       	out	0x05, r14	; 5
 1c8:	ba cf       	rjmp	.-140    	; 0x13e <loop+0x62>
	if(currentDelay>MIN_DELAY){
		currentDelay-=STEP_DELAY;
	}else{
		currentDelay=MAX_DELAY;
	}
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	08 95       	ret

000001d8 <main>:
void setup();
void loop();

int main(void)
{
	setup();
 1d8:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	while (1)
	{
		loop();
 1dc:	0e 94 6e 00 	call	0xdc	; 0xdc <loop>
	}
 1e0:	fd cf       	rjmp	.-6      	; 0x1dc <main+0x4>

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
